import 'dart:convert';
// import 'package:http/http.dart' as http; // Kh√¥ng c·∫ßn thi·∫øt n·∫øu chuy·ªÉn sang Dio ho√†n to√†n
import 'package:dio/dio.dart'; // Import Dio
import 'package:retry/retry.dart';
import 'package:englishquizapp/constants/server_config.dart';
import 'package:englishquizapp/services/auth_service.dart';
import 'package:englishquizapp/models/user_ranking.dart'; // Import model m·ªõi

class ScoreService {
  // Kh·ªüi t·∫°o Dio client
  static final Dio _dio = Dio();

  static Future<String> getBaseUrl() async => await ServerConfig.getBaseUrl();

  /// L∆∞u ƒëi·ªÉm
  static Future<void> saveScore({
    required String userId,
    required int score,
    required String mode,
    required int duration,
  }) async {
    final baseUrl = await getBaseUrl();
    final String url = '$baseUrl/api/score';
    final token = await AuthService.getToken();

    if (token == null) {
      throw Exception('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u ƒëi·ªÉm.');
    }

    try {
      final response = await retry(
            () => _dio.post( // S·ª≠ d·ª•ng _dio.post
          url,
          options: Options( // C·∫•u h√¨nh headers v√† timeout cho Dio
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer $token',
            },
            sendTimeout: const Duration(seconds: 10), // Timeout cho g·ª≠i request
            receiveTimeout: const Duration(seconds: 10), // Timeout cho nh·∫≠n response
          ),
          data: { // body trong Dio l√† data
            'userId': userId,
            'score': score,
            'mode': mode,
            'duration': duration,
          },
        ),
        maxAttempts: 3,
      );

      print('üì§ Save Score body: ${jsonEncode({
        'userId': userId,
        'score': score,
        'mode': mode,
        'duration': duration,
      })}');

      print('Save Score response: ${response.data}'); // response.data cho Dio
      if (response.statusCode != 201) {
        throw Exception('‚ùå L·ªói khi l∆∞u ƒëi·ªÉm: ${response.data}');
      }
    } on DioException catch (e) { // B·∫Øt DioException
      print('‚ùå L·ªói khi g·ª≠i y√™u c·∫ßu l∆∞u ƒëi·ªÉm: ${e.message}');
      throw Exception('L·ªói khi g·ª≠i y√™u c·∫ßu l∆∞u ƒëi·ªÉm: ${e.message}');
    } catch (e) {
      print('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i y√™u c·∫ßu l∆∞u ƒëi·ªÉm: $e');
      throw Exception('L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i y√™u c·∫ßu l∆∞u ƒëi·ªÉm: $e');
    }
  }

  /// L∆∞u chi ti·∫øt quiz
  static Future<void> saveQuizDetails({
    required String userId,
    required String quizId,
    required String level,
    required List<Map<String, dynamic>> answers,
    required int score,
    required int duration, // Th√™m tr∆∞·ªùng duration
  }) async {
    if (userId.isEmpty || quizId.isEmpty) {
      throw Exception('userId v√† quizId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
    }
    if (!['easy', 'normal', 'hard'].contains(level.toLowerCase())) {
      throw Exception('M·ª©c ƒë·ªô kh√¥ng h·ª£p l·ªá');
    }
    if (answers.isEmpty) {
      throw Exception('Danh s√°ch c√¢u tr·∫£ l·ªùi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.');
    }

    final baseUrl = await getBaseUrl();
    final String url = '$baseUrl/api/quiz-details';
    final token = await AuthService.getToken();

    if (token == null) {
      throw Exception('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u chi ti·∫øt b√†i l√†m.');
    }

    try {
      final formattedAnswers = answers.map((answer) {
        if (answer['questionId'] == null || answer['isCorrect'] == null) {
          throw Exception('C√¢u tr·∫£ l·ªùi kh√¥ng h·ª£p l·ªá: Thi·∫øu questionId ho·∫∑c isCorrect.');
        }
        return {
          'questionId': answer['questionId'],
          'selectedAnswer': answer['selectedAnswer'],
          'timeTaken': answer['timeTaken'] ?? 0,
          'isCorrect': answer['isCorrect'],
        };
      }).toList();

      final response = await retry(
            () => _dio.post(
          url,
          options: Options(
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer $token',
            },
            sendTimeout: const Duration(seconds: 10),
            receiveTimeout: const Duration(seconds: 10),
          ),
          data: {
            'userId': userId,
            'quizId': quizId,
            'level': level,
            'answers': formattedAnswers,
            'score': score,
            'duration': duration,
          },
        ),
        maxAttempts: 3,
        delayFactor: const Duration(seconds: 1),
      );

      print('‚úÖ Save Quiz Details response: ${response.data}');
      if (response.statusCode != 201) {
        throw Exception('‚ùå L·ªói khi l∆∞u chi ti·∫øt quiz: ${response.data}');
      }
    } on DioException catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi khi l∆∞u chi ti·∫øt quiz: ${e.message}');
      rethrow;
    } catch (e) {
      print('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi l∆∞u chi ti·∫øt quiz: $e');
      rethrow;
    }
  }

  /// L·∫•y b·∫£ng x·∫øp h·∫°ng
  static Future<List<UserRanking>> getRanking(String mode) async {
    if (!['easy', 'normal', 'hard'].contains(mode.toLowerCase())) {
      throw Exception('M·ª©c ƒë·ªô kh√¥ng h·ª£p l·ªá');
    }

    final baseUrl = await getBaseUrl();
    final String url = '$baseUrl/api/score/ranking/$mode';
    final token = await AuthService.getToken();

    if (token == null) {
      throw Exception('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem b·∫£ng x·∫øp h·∫°ng.');
    }

    try {
      final response = await retry(
            () => _dio.get( // S·ª≠ d·ª•ng _dio.get
          url,
          options: Options(
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer $token',
            },
            sendTimeout: const Duration(seconds: 10),
            receiveTimeout: const Duration(seconds: 10),
          ),
        ),
        maxAttempts: 3,
        delayFactor: const Duration(seconds: 1),
      );

      print('Ranking URL: $url');
      print('Status code: ${response.statusCode}');
      print('Response data: ${response.data}'); // response.data cho Dio
      // ƒê√£ x√≥a d√≤ng g√¢y l·ªói: print('Response data bytes: ${response.dataBytes}');

      if (response.statusCode == 401) {
        throw Exception('Kh√¥ng ƒë∆∞·ª£c ph√©p: Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      }

      if (response.statusCode == 404) {
        throw Exception('Kh√¥ng t√¨m th·∫•y endpoint. Vui l√≤ng ki·ªÉm tra URL.');
      }

      if (response.statusCode == 200) {
        // Dio t·ª± ƒë·ªông parse JSON, response.data ƒë√£ l√† List<dynamic> ho·∫∑c Map<String, dynamic>
        // Kh√¥ng c·∫ßn jsonDecode(response.body) n·ªØa
        final List<dynamic> data = response.data;

        // Ki·ªÉm tra n·∫øu data l√† null ho·∫∑c kh√¥ng ph·∫£i List
        if (data == null || data is! List) {
          throw Exception('Ph·∫£n h·ªìi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: Kh√¥ng ph·∫£i danh s√°ch.');
        }

        return data.map((json) => UserRanking.fromJson(json as Map<String, dynamic>)).toList();
      } else {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y b·∫£ng x·∫øp h·∫°ng: ${response.statusCode} - ${response.data}');
      }
    } on DioException catch (e) { // B·∫Øt DioException
      print('‚ùå L·ªói k·∫øt n·ªëi khi l·∫•y ranking: ${e.message}');
      // C√≥ th·ªÉ ki·ªÉm tra e.response?.data ƒë·ªÉ xem ph·∫£n h·ªìi l·ªói t·ª´ server
      if (e.response != null) {
        print('Ph·∫£n h·ªìi l·ªói t·ª´ server: ${e.response?.data}');
      }
      rethrow;
    } catch (e) {
      print('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y ranking: $e');
      rethrow;
    }
  }
}

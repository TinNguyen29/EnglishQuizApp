const Score = require("../models/score");
const User = require("../models/User"); // ph·∫£i import User

// ‚úÖ Ghi ƒëi·ªÉm c√≥ g·∫Øn user_id t·ª´ email
exports.saveScore = async (req, res) => {
  try {
    const { userId, score, mode, duration } = req.body;

    if (!userId || score == null || !mode || duration == null) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc" });
    }

    // C·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi b·∫£n ghi Score
    const updatedScore = await Score.findOneAndUpdate(
      { user_id: userId, mode },
      { score, duration, date: new Date() },
      { upsert: true, new: true }
    );

    // C·∫≠p nh·∫≠t maxScore v√† bestDuration trong User model
    // ƒê√¢y l√† ph·∫ßn quan tr·ªçng ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu hi·ªÉn th·ªã tr√™n b·∫£ng x·∫øp h·∫°ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    const user = await User.findById(userId);
    if (user) {
      // C·∫≠p nh·∫≠t maxScore
      if (user.maxScore === undefined || user.maxScore === null || score > user.maxScore) {
        user.maxScore = score;
      }
      // C·∫≠p nh·∫≠t bestDuration (th·ªùi gian th·∫•p nh·∫•t l√† t·ªët nh·∫•t)
      // ƒê·∫£m b·∫£o duration kh√¥ng ph·∫£i l√† null tr∆∞·ªõc khi so s√°nh
      if (duration != null && (user.bestDuration === undefined || user.bestDuration === null || duration < user.bestDuration)) {
        user.bestDuration = duration;
      }
      await user.save();
    }


    res
      .status(201)
      .json({
        message: "‚úÖ ƒê√£ l∆∞u/c·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng",
        data: updatedScore,
      });
  } catch (err) {
    res.status(500).json({ error: "‚ùå L·ªói khi l∆∞u ƒëi·ªÉm: " + err.message });
  }
};

// ‚úÖ L·∫•y ƒëi·ªÉm c·ªßa 1 user c·ª• th·ªÉ
exports.getUserScores = async (req, res) => {
  try {
    const scores = await Score.find({ user_id: req.params.userId });
    res.json(scores);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// ‚úÖ B·∫£ng x·∫øp h·∫°ng (top ƒëi·ªÉm)
exports.getRankingByMode = async (req, res) => {
  const mode = req.params.mode;

  try {
    const topScores = await Score.aggregate([
      { $match: { mode } },
      {
        $lookup: {
          from: "users",
          localField: "user_id",
          foreignField: "_id",
          as: "userInfo",
        },
      },
      { $unwind: "$userInfo" },
      {
        $group: {
          _id: "$user_id",
          username: { $first: "$userInfo.username" },
          email: { $first: "$userInfo.email" },
          maxScore: { $max: "$score" },
          bestDuration: { $min: "$duration" }, // ƒê·∫£m b·∫£o t√™n tr∆∞·ªùng l√† "bestDuration"
        },
      },
      {
        // Th√™m $project stage ƒë·ªÉ ƒë·∫£m b·∫£o c√°c tr∆∞·ªùng l√† s·ªë v√† x·ª≠ l√Ω null
        $project: {
          _id: 1,
          username: 1,
          email: 1,
          maxScore: { $ifNull: ["$maxScore", 0] },
          bestDuration: { $ifNull: ["$bestDuration", 0] }, // ƒê·∫£m b·∫£o t√™n tr∆∞·ªùng l√† "bestDuration"
        },
      },
      {
        $sort: {
          maxScore: -1, // ƒëi·ªÉm cao nh·∫•t tr∆∞·ªõc
          bestDuration: 1, // th·ªùi gian l√†m b√†i ng·∫Øn h∆°n s·∫Ω ƒë·ª©ng tr∆∞·ªõc n·∫øu b·∫±ng ƒëi·ªÉm
        },
      },
      { $limit: 10 },
    ]);

    console.log("üéØ TOP SCORES:", topScores);
    res.json(topScores);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error.message });
  }
};
